% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/rewind_junk.R
\name{log_marginal0}
\alias{log_marginal0}
\title{determine to update the current element of Q_ml or not}
\usage{
log_marginal0(Y, Q, p, theta, psi)
}
\arguments{
\item{Y}{the data for the current cluster (a subset of observations.)}

\item{Q}{a matrix with rows being machines and columns being protein landmarks (dimension)}

\item{p}{prevalence parameter for each machine; should be a vector of dimension M.}

\item{theta}{true positive rates}

\item{psi}{true positive rates}

\item{v}{the vector (a binary vector)}

\item{k}{the index that is being checked if \code{v[k]} is the only one in
vector \code{v}. \code{k} must be smaller than or equal to the length of k}

\item{Q}{Q-matrix}
}
\value{
a matrix filled with logical values of dimensions identical to Q. TRUE for updating
in constrained Gibbs sampler, FALSE for skipping the updating.
check whether a vector is equal to a unit vector with the one at a particular
position

true for \eqn{v = \mathbf{e}_k}

log of marginal likelihood given other model parameters.
}
\description{
Function to test whether we need to update the current element of Q_ml. This
is needed in the constrained Gibbs sampler.
}
\examples{
Compute the cluster-specific marginal likelihood

This R function computes the marginal likelihood by integrating over
the distribution of component specific parameter (e.g., machine usage profiles).
This function conditions upon a few model parameters: the true and false positive
rates (theta and psi), the Q matrix and {p}-the prevalence parameter for each machines.

# simulate data:
L0 <- 100
options_sim0  <- list(N = 200,  # sample size.
                     M = 3,   # true number of machines.
                     L = L0,   # number of antibody landmarks.
                     K = 8,    # number of true components.,
                     theta = rep(0.8,L0), # true positive rates
                     psi   = rep(0.01,L0), # false positive rates
                     alpha1 = 1 # half of the people have the first machine.
)

simu     <- simulate_data(options_sim0, SETSEED=TRUE)
simu_dat <- simu$datmat
Y <- simu_dat
 Q <- simu$Q
 p <- c(0.5,0.25,0.1,0.02,0.05)
 theta <- options_sim0$theta
 psi   <- options_sim0$psi

log_marginal0(Y, Q, p, theta, psi)
# log_marginal(Y, Q, p, theta, psi) # <-- this is the Rcpp implementation.
}
